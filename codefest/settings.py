"""
Django settings for codefest project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

import dj_database_url
import firebase_admin
import pyAesCrypt
from dotenv import load_dotenv
from firebase_admin import credentials
from google.oauth2 import service_account

load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", "1"))

# SECURITY WARNING: keep the secret key used in production secret!
if DEBUG:
    SECRET_KEY = "2xnn%tj(@mc(n^io&c^j0*=bq$7kwe&)o$+mk8d=!jujiueb(s"
else:
    SECRET_KEY = os.getenv("SECRET_KEY", '')

ALLOWED_HOSTS = ["codefest-api.iitbhu.tech", "api-codefest.iitbhu.tech", "127.0.0.1", "localhost", "0.0.0.0"]
ALLOWED_HOSTS.extend(
    filter(
        None,
        os.environ.get('ALLOWED_HOSTS', '').split(','),
    )
)


# Application definition

INSTALLED_APPS = [
    "channels",
    "chat_bot",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "website",
    "Auth",
    "rest_framework",
    "rest_framework.authtoken",
    "drf_yasg",
    "arithmetica",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "codefest.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "codefest.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

if "DATABASE_HOST" in os.environ:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": os.environ["DATABASE_NAME"],
            "USER": os.environ["DATABASE_USER"],
            "PASSWORD": os.environ["DATABASE_PASSWORD"],
            "HOST": os.environ["DATABASE_HOST"],
            "PORT": os.environ["DATABASE_PORT"],
            "OPTIONS": {
                "charset": "utf8mb4",
            },
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Authentication Classes
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        # 'rest_framework.authentication.SessionAuthentication',
    )
}

# Permission Classes
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",)
}
# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kolkata"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/static/'
MEDIA_URL = '/static/media/'

PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = os.path.join(PROJECT_DIR, 'static')

cred = credentials.Certificate(os.path.join(BASE_DIR, "service_account.json"))
default_app = firebase_admin.initialize_app(cred)

CORS_ORIGIN_REGEX_WHITELIST = (
    r"^https://\w+\.codefest\.tech$",
    r"^https://codefest\.tech$",
    r"^http://127\.0\.0\.1:8080$",
    r"^http://127\.0\.0\.1:9000$",
    r"^http://localhost:8000$",
    r"^http://localhost:3000$",
    r"^http://0\.0\.0\.0:8080$",
)
CSRF_TRUSTED_ORIGINS = (
    ".codefest.tech",
    "codefest.tech",
    "127.0.0.1:8080",
    "localhost:8000",
    "localhost:3000",
    "0.0.0.0:8080",
)

GOOGLE_RECAPTCHA_SECRET_KEY = os.getenv("GOOGLE_RECAPTCHA_SECRET_KEY", "")
GOOGLE_RECAPTCHA_URL = "https://www.google.com/recaptcha/api/siteverify"

SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY", "")

DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
GS_BUCKET_NAME = "codefest19.appspot.com"
GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
    os.path.join(BASE_DIR, "service_account.json")
)

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Token": {"type": "apiKey", "name": "Authorization", "in": "header"}
    }
}

# Configure Logger

LOG_DIR = (
    os.environ["LOG_DIR"] if "LOG_DIR" in os.environ else os.path.join(BASE_DIR, "logs")
)
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)
LOG_FILE_PATH = os.path.join(LOG_DIR, "codefest.log")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": """[%(levelname)s] [%(asctime)s] [fn: %(module)s.%(funcName)s-%(lineno)d] %(message)s"""
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "backupCount": 5,
            "when": "W0",
            "interval": 1,
            "filename": LOG_FILE_PATH,
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

CELERY_TASK_SERIALIZER = "json"
CELERY_BROKER_URL = "amqp://localhost"
if not DEBUG:
    CELERY_BROKER_URL = os.getenv("CLOUDAMQP_URL", "")


ASGI_APPLICATION = "codefest.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        # 'BACKEND': 'channels_redis.core.RedisChannelLayer',
        # 'CONFIG': {
        #     "hosts": [('127.0.0.1', 6379)],
        # },
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

# Configure SMTP Email
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_SSL = False
EMAIL_USE_TLS = True
EMAIL_HOST_USER = (
    os.environ["EMAIL_HOST_USER"] if "EMAIL_HOST_USER" in os.environ else "email"
)
EMAIL_HOST_PASSWORD = (
    os.environ["EMAIL_HOST_PASSWORD"]
    if "EMAIL_HOST_PASSWORD" in os.environ
    else "password"
)
